Contents of ./backend/app/__init__.py:

Contents of ./backend/app/main.py:
from fastapi import FastAPI
# Adjust the import to the new path
from app.routers import company_enrichment, person_identify

app = FastAPI()

app.include_router(company_enrichment.router)
app.include_router(person_identify.router)

@app.get("/")
async def root():
    return {"message": "PDL App Backend Running"}

Contents of ./backend/app/models/company_enrichment_request.py:
from pydantic import BaseModel

class CompanyEnrichmentRequest(BaseModel):
    pdl_id: str = None
    name: str = None
    website: str = None
    profile: str = None

Contents of ./backend/app/models/person_identify_request.py:
from pydantic import BaseModel

class PersonIdentifyRequest(BaseModel):
    name: str = None
    first_name: str = None
    last_name: str = None
    middle_name: str = None
    location: str = None
    street_address: str = None
    locality: str = None
    region: str = None
    country: str = None
    postal_code: str = None
    company: str = None
    school: str = None
    phone: str = None
    email: str = None
    email_hash: str = None
    profile: str = None
    linkedin: str = None
    birth_date: str = None

Contents of ./backend/app/routers/__init__.py:

Contents of ./backend/app/routers/company_enrichment.py:
from fastapi import APIRouter, HTTPException
from ..models.company_enrichment_request import CompanyEnrichmentRequest
from peopledatalabs import PDLPY
import os

router = APIRouter()

@router.post("/company_enrichment")
async def company_enrichment(data: CompanyEnrichmentRequest):
    api_key = os.getenv('PDL_API_KEY')
    if not api_key:
        raise HTTPException(status_code=500, detail="API key not configured")

    client = PDLPY(api_key=api_key)
    result = client.company.enrichment(**data.dict(), pretty=True)
    if result.ok:
        return result.json()
    else:
        raise HTTPException(status_code=result.status_code, detail=result.text)

Contents of ./backend/app/routers/person_identify.py:
from fastapi import APIRouter, HTTPException
from ..models.person_identify_request import PersonIdentifyRequest
from peopledatalabs import PDLPY
import os

router = APIRouter()

@router.post("/person_identify")
async def person_identify(data: PersonIdentifyRequest):
    api_key = os.getenv('PDL_API_KEY')
    if not api_key:
        raise HTTPException(status_code=500, detail="API key not configured")

    client = PDLPY(api_key=api_key)
    result = client.person.identify(**data.dict(), titlecase=True, pretty=True)
    if result.ok:
        return result.json()
    else:
        raise HTTPException(status_code=result.status_code, detail=result.text)

Contents of ./backend/requirements.txt:
fastapi
uvicorn
pydantic
python-dotenv
httpx
pytest
requests
peopledatalabs
